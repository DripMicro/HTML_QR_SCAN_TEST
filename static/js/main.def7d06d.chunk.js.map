{"version":3,"sources":["HowToUse.jsx","Html5QrcodePlugin.jsx","ResultContainerPlugin.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["HowToUse","props","className","href","qrcodeRegionId","Html5QrcodePlugin","useEffect","config","fps","qrbox","aspectRatio","undefined","disableFlip","createConfig","verbose","qrCodeSuccessCallback","html5QrcodeScanner","Html5QrcodeScanner","render","qrCodeErrorCallback","clear","catch","error","console","id","filterResults","results","filteredResults","i","length","decodedText","push","ResultContainerTable","data","map","result","log","format","formatName","ResultContainerPlugin","App","useState","decodedResults","setDecodedResults","decodedResult","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"2PAyBeA,EAxBE,SAACC,GACd,OACI,sBAAKC,UAAU,mBAAf,UACI,6CACA,gDAEI,mBAAGC,KAAK,oDAAR,4CAFJ,gCAMI,uBACA,uBAPJ,kBASI,mBAAGA,KAAK,yCAAR,iCATJ,IAYI,uBACA,uBAbJ,+CAcgD,mBAAGA,KAAK,sBAAR,yBAdhD,W,QCFNC,EAAiB,2BA8CRC,EA1BW,SAACJ,GAqBvB,OAnBAK,qBAAU,WAEN,IAAMC,EArBO,SAACN,GAClB,IAAIM,EAAS,GAab,OAZIN,EAAMO,MACND,EAAOC,IAAMP,EAAMO,KAEnBP,EAAMQ,QACNF,EAAOE,MAAQR,EAAMQ,OAErBR,EAAMS,cACNH,EAAOG,YAAcT,EAAMS,kBAELC,IAAtBV,EAAMW,cACNL,EAAOK,YAAcX,EAAMW,aAExBL,EAOYM,CAAaZ,GACtBa,GAA4B,IAAlBb,EAAMa,QAEtB,IAAMb,EAAMc,sBACR,KAAM,8CAEV,IAAMC,EAAqB,IAAIC,IAAmBb,EAAgBG,EAAQO,GAI1E,OAHAE,EAAmBE,OAAOjB,EAAMc,sBAAuBd,EAAMkB,qBAGtD,WACHH,EAAmBI,QAAQC,OAAM,SAAAC,GAC7BC,QAAQD,MAAM,uCAAwCA,SAG/D,IAGC,qBAAKE,GAAIpB,KC3CjB,SAASqB,EAAeC,GAEpB,IADA,IAAIC,EAAkB,GACbC,EAAI,EAAGA,EAAIF,EAAQG,SAAUD,EACxB,IAANA,EAKAF,EAAQE,GAAGE,cAAgBJ,EAAQE,EAAI,GAAGE,aAC1CH,EAAgBI,KAAKL,EAAQE,IAL7BD,EAAgBI,KAAKL,EAAQE,IAQrC,OAAOD,EAGX,IAAMK,EAAuB,SAAC,GAAc,IAClCN,EAAUD,EADuB,EAAXQ,MAE5B,OACI,wBAAO/B,UAAW,sBAAlB,UACI,gCACI,+BACI,mCACA,8CACA,6CAGR,gCAEQwB,EAAQQ,KAAI,SAACC,EAAQP,GAEjB,OADAL,QAAQa,IAAID,GACJ,+BACJ,6BAAKP,IACL,6BAAKO,EAAOL,cACZ,6BAAKK,EAAOA,OAAOE,OAAOC,eAHbV,YAwB1BW,EAZe,SAACtC,GAC3B,IAAMyB,EAAUD,EAAcxB,EAAMyB,SACpC,OACI,sBAAKxB,UAAU,mBAAf,UACI,sBAAKA,UAAU,gBAAf,8BAAiDwB,EAAQG,OAAzD,OACA,qBAAK3B,UAAU,iBAAf,SACI,cAAC,EAAD,CAAsB+B,KAAMP,UCf7Bc,EA3BH,SAACvC,GACT,MAA4CwC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAMA,OACI,qBAAKzC,UAAU,MAAf,SACI,0BAASA,UAAU,cAAnB,UACI,qBAAKA,UAAU,oBAAf,sCACA,uBACA,uBACA,uBACA,cAAC,EAAD,CACIM,IAAK,GACLC,MAAO,IACPG,aAAa,EACbG,sBAhBQ,SAACe,EAAac,GAClCrB,QAAQa,IAAI,eAAgBQ,GAC5BD,GAAkB,SAAAE,GAAI,4BAAQA,GAAR,CAAcD,UAgB5B,cAAC,EAAD,CAAuBlB,QAASgB,IAChC,cAAC,EAAD,UCjBDI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASrC,OACP,cAAC,IAAMsC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.def7d06d.chunk.js","sourcesContent":["// @ts-check\r\nconst HowToUse = (props) => {\r\n    return (\r\n        <div className='App-info-section'>\r\n            <h3>How to use?</h3>\r\n            <div>\r\n                Check out&nbsp;\r\n                <a href=\"https://github.com/scanapp-org/html5-qrcode-react\">\r\n                    scanapp-org/html5-qrcode-react\r\n                </a>&nbsp;\r\n                on Github for reference.\r\n                <br />\r\n                <br />\r\n                Built using&nbsp;\r\n                <a href=\"https://github.com/mebjas/html5-qrcode\">\r\n                    mebjas/html5-qrcode\r\n                </a>.\r\n                <br />\r\n                <br />\r\n                Free QR code scanner and barcode scanner at <a href=\"https://scanapp.org\">scanapp.org</a>.\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HowToUse;\r\n","import { Html5QrcodeScanner } from 'html5-qrcode';\r\nimport { useEffect } from 'react';\r\n\r\nconst qrcodeRegionId = \"html5qr-code-full-region\";\r\n\r\n// Creates the configuration object for Html5QrcodeScanner.\r\nconst createConfig = (props) => {\r\n    let config = {};\r\n    if (props.fps) {\r\n        config.fps = props.fps;\r\n    }\r\n    if (props.qrbox) {\r\n        config.qrbox = props.qrbox;\r\n    }\r\n    if (props.aspectRatio) {\r\n        config.aspectRatio = props.aspectRatio;\r\n    }\r\n    if (props.disableFlip !== undefined) {\r\n        config.disableFlip = props.disableFlip;\r\n    }\r\n    return config;\r\n};\r\n\r\nconst Html5QrcodePlugin = (props) => {\r\n\r\n    useEffect(() => {\r\n        // when component mounts\r\n        const config = createConfig(props);\r\n        const verbose = props.verbose === true;\r\n        // Suceess callback is required.\r\n        if (!(props.qrCodeSuccessCallback)) {\r\n            throw \"qrCodeSuccessCallback is required callback.\";\r\n        }\r\n        const html5QrcodeScanner = new Html5QrcodeScanner(qrcodeRegionId, config, verbose);\r\n        html5QrcodeScanner.render(props.qrCodeSuccessCallback, props.qrCodeErrorCallback);\r\n\r\n        // cleanup function when component will unmount\r\n        return () => {\r\n            html5QrcodeScanner.clear().catch(error => {\r\n                console.error(\"Failed to clear html5QrcodeScanner. \", error);\r\n            });\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div id={qrcodeRegionId} />\r\n    );\r\n};\r\n\r\nexport default Html5QrcodePlugin;\r\n","import React from 'react';\r\n\r\nfunction filterResults (results) {\r\n    let filteredResults = [];\r\n    for (var i = 0; i < results.length; ++i) {\r\n        if (i === 0) {\r\n            filteredResults.push(results[i]);\r\n            continue;\r\n        }\r\n\r\n        if (results[i].decodedText !== results[i - 1].decodedText) {\r\n            filteredResults.push(results[i]);\r\n        }\r\n    }\r\n    return filteredResults;\r\n}\r\n\r\nconst ResultContainerTable = ({ data }) => {\r\n    const results = filterResults(data);\r\n    return (\r\n        <table className={'Qrcode-result-table'}>\r\n            <thead>\r\n                <tr>\r\n                    <td>#</td>\r\n                    <td>Decoded Text</td>\r\n                    <td>Format</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    results.map((result, i) => {\r\n                        console.log(result);\r\n                        return (<tr key={i}>\r\n                            <td>{i}</td>\r\n                            <td>{result.decodedText}</td>\r\n                            <td>{result.result.format.formatName}</td>\r\n                        </tr>);\r\n                    })\r\n                }\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nconst ResultContainerPlugin = (props) => {\r\n    const results = filterResults(props.results);\r\n    return (\r\n        <div className='Result-container'>\r\n            <div className='Result-header'>Scanned results ({results.length})</div>\r\n            <div className='Result-section'>\r\n                <ResultContainerTable data={results} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResultContainerPlugin;\r\n","// @ts-check\r\n\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\nimport HowToUse from './HowToUse.jsx';\r\nimport Html5QrcodePlugin from './Html5QrcodePlugin.jsx';\r\nimport ResultContainerPlugin from './ResultContainerPlugin.jsx';\r\n\r\nconst App = (props) => {\r\n    const [decodedResults, setDecodedResults] = useState([]);\r\n    const onNewScanResult = (decodedText, decodedResult) => {\r\n        console.log(\"App [result]\", decodedResult);\r\n        setDecodedResults(prev => [...prev, decodedResult]);\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <section className=\"App-section\">\r\n                <div className=\"App-section-title\"> Html5-qrcode React demo</div>\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <Html5QrcodePlugin\r\n                    fps={10}\r\n                    qrbox={250}\r\n                    disableFlip={false}\r\n                    qrCodeSuccessCallback={onNewScanResult}\r\n                />\r\n                <ResultContainerPlugin results={decodedResults} />\r\n                <HowToUse />\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}